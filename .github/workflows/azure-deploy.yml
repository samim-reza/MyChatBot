name: Deploy to Azure App Service

on:
  push:
    branches: [ main, master ]  # Support both main and master branches
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allow manual trigger

env:
  AZURE_WEBAPP_NAME: samim-chatbot-app
  AZURE_CONTAINER_REGISTRY: samimchatbotregistry.azurecr.io
  IMAGE_NAME: samim-chatbot
  PYTHON_VERSION: '3.10'
  
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: image=moby/buildkit:latest
    
    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.fast
        push: true
        tags: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
    
    - name: Set Web App environment variables
      uses: azure/appservice-settings@v1
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        mask-inputs: false
        app-settings-json: |
          [
            {
              "name": "GROQ_API_KEY",
              "value": "${{ secrets.GROQ_API_KEY }}",
              "slotSetting": false
            },
            {
              "name": "ANONYMIZED_TELEMETRY",
              "value": "False",
              "slotSetting": false
            },
            {
              "name": "WEBSITES_PORT",
              "value": "8000",
              "slotSetting": false
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_URL",
              "value": "https://${{ env.AZURE_CONTAINER_REGISTRY }}",
              "slotSetting": false
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_USERNAME",
              "value": "${{ secrets.ACR_USERNAME }}",
              "slotSetting": false
            },
            {
              "name": "DOCKER_REGISTRY_SERVER_PASSWORD",
              "value": "${{ secrets.ACR_PASSWORD }}",
              "slotSetting": false
            }
          ]
    
    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v3
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        images: ${{ env.AZURE_CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Wait for deployment
      run: sleep 30
    
    - name: Health Check
      run: |
        echo "Checking application health..."
        RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/api/debug/config || echo "000")
        if [ "$RESPONSE" -eq 200 ]; then
          echo "✅ Application is healthy (HTTP $RESPONSE)"
        else
          echo "⚠️ Application health check returned HTTP $RESPONSE"
          echo "Note: Application may still be starting up"
        fi
    
    - name: Azure logout
      if: always()
      run: |
        az logout